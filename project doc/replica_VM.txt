CONFIGURE A DISTRIBUTED REPLICA SET ON VMs

1) You have been assigned 3 VMs, each with its IP address:
	- You need to connect to VMs through VPN:
		- Install OpenVPN Client from https://openvpn.net/community-downloads-2/
		- Download the largescale.ovpn file containing all the parameters for the VPN
		- Start OpenVPN and select "Import from file"
		- Select the largescale.ovpn file and start the connection

	- Connect to each VM (use 3 different shells): you should be able to connect through
		ssh via user=root & pass=root:

		ssh root@<IP_VM1>
		ssh root@<IP_VM2>
		ssh root@<IP_VM3>

	- Once you are logged in Install MongoDB Server onto each VM. Issue the following commands:

		# to import the MongoDB public GPG Key. The operation should respond with an OK
			wget -qO - https://www.mongodb.org/static/pgp/server-6.0.asc | sudo apt-key add -

		# Create the list file /etc/apt/sources.list.d/mongodb-org-6.0.list for your version of Ubuntu
		# (version 18.04 is installed onto VMs provided)
			echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list

		# Reload the local package database
			sudo apt-get update

		# Install the MongoDB packages
			sudo apt-get install -y mongodb-org

	- Once you have installed MongoDB Server (with previous steps) you can START a mongod process on each VM:

		# create data directory (do it on each VM):
			mkdir data

		# start each mongod instance on each VM: (replace <IP_VM1> with the actual IPs of each VM)

			#VM1
			mongod --replSet lsmdb --dbpath ~/data --port 27017 --bind_ip localhost,<IP_VM1> --oplogSize 200

			#VM2
			mongod --replSet lsmdb --dbpath ~/data --port 27017 --bind_ip localhost,<IP_VM2> --oplogSize 200

			#VM3
			mongod --replSet lsmdb --dbpath ~/data --port 27017 --bind_ip localhost,<IP_VM3> --oplogSize 200

	- Open a 4th shell and issue

		mongosh --port 27017

	- Set the configuration file for the Distributed Replica Set (copy and paste into shell the following):

		rsconf = {
			_id: "lsmdb",
			members: [
	      		{_id: 0, host: "172.16.5.17:27017", priority:1},
	      		{_id: 1, host: "172.16.5.18:27017", priority:2},
	      		{_id: 2, host: "172.16.5.19:27017", priority:5}]
		};

	- Initiate the replica set (only ONCE)

		rs.initiate(rsconf);

	- Display the current replica configuration by issuing the following command:

		rs.status();

	- If needed, Change configuration by issuing (NB: YOU NEED TO CARRY OUT THE FOLLOWING STEPS
		CONNECTING WITH MONGOSH TO THE CURRENT PRIMARY NODE or you can't reconfigure Replica Set):

		# The following statement uses the rs.conf() method to retrieve a document
		# containing the current configuration for the replica set
		# and sets the document to the local variable cfg.

			cfg = rs.conf();

		# sets a members[n].priority value to the second document in the members array.
		# For additional settings, see replica set configuration settings.
		#NB: To access the member configuration document in the array,
		#the statement uses the array index and not the replica set member's members[n]._id field.

			cfg.members[1].priority = 2;

		# calls the rs.reconfig() method with the modified cfg to initialize this new configuration.

			rs.reconfig(cfg);


	- For all configuration details check the official documentation
